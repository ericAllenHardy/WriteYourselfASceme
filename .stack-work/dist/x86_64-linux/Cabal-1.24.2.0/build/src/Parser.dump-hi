
==================== FINAL INTERFACE ====================
2017-05-04 03:43:36.947442 UTC

interface scheme-interpreter-0.1.0.0-JFS5auRCRjm1JEogNedKop:Parser 8002
  interface hash: 6bb174668391b80f159cfad13d5ccdfe
  ABI hash: 01230004aace75285d58faa15e8d6600
  export-list hash: aaf4d58828b3cc4c164f226b7893db3a
  orphan hash: 37083dd6c21159dce7a469020080a497
  flag hash: ab396f11155bd696ab63895436e6f1df
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.parseExpr
  Parser.LispParser
  Parser.LispVal{Parser.Atom Parser.Bool Parser.Char Parser.DottedList Parser.Float Parser.List Parser.Number Parser.String Parser.Vector}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw
                      primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH
                      text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR
                      transformers-0.5.2.0@transformers-0.5.2.0
                      vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Show
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector.Fusion.Bundle
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         primitive-0.6.1.0@primitive-0.6.1.0-6AbSTw9JXz141LE5p6LGH:Control.Monad.Primitive
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text
                         text-1.2.2.1@text-1.2.2.1-Ji7hMs2U4BkBwavd4taEVR:Data.Text.Lazy
                         vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.Functor 5ab1dc703df5b482e77efb697833ca3c
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Real 82e4e59051a13dba1da63e1e970a69e6
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Numeric bdcfa841811670500691657d058d32ea
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Char 261fdcccc6ba24f6960e6d582f789f87
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Combinator 78c61d4944845dac4be543f4a5fad926
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.Prim cf8fdd65b268b07ee0d4808d85010d49
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.Parsec.String 82047932fe8b05f9590326d15e87580c
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.ParserCombinators.Parsec 09138eb929906f6c6f6f40463cb9c077
import  -/  parsec-3.1.11@parsec-3.1.11-113irVHGgd88sRnywByDNw:Text.ParserCombinators.Parsec.Prim 36790067a17bf441b93287d5552b97d2
import  -/  vector-0.11.0.0@vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG:Data.Vector 5a746e9670329619c461c982b12cd97b
de11748afe47b1fa0ce3970be4bc42ed
  $fEqLispVal :: GHC.Classes.Eq Parser.LispVal
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.LispVal Parser.$fEqLispVal_$c== Parser.$fEqLispVal_$c/= -}
de11748afe47b1fa0ce3970be4bc42ed
  $fEqLispVal_$c/= ::
    Parser.LispVal -> Parser.LispVal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Parser.LispVal) (b :: Parser.LispVal) ->
                 case Parser.$fEqLispVal_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
de11748afe47b1fa0ce3970be4bc42ed
  $fEqLispVal_$c== ::
    Parser.LispVal -> Parser.LispVal -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
de11748afe47b1fa0ce3970be4bc42ed
  $fShowLispVal :: GHC.Show.Show Parser.LispVal
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Parser.LispVal
                  Parser.$fShowLispVal_$cshowsPrec
                  Parser.$fShowLispVal_$cshow
                  Parser.$fShowLispVal_$cshowList -}
de11748afe47b1fa0ce3970be4bc42ed
  $fShowLispVal1 :: Parser.LispVal -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: Parser.LispVal) ->
                 Parser.$w$cshowsPrec 0# w) -}
de11748afe47b1fa0ce3970be4bc42ed
  $fShowLispVal_$cshow :: Parser.LispVal -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Parser.LispVal) ->
                 Parser.$fShowLispVal_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
de11748afe47b1fa0ce3970be4bc42ed
  $fShowLispVal_$cshowList :: [Parser.LispVal] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.LispVal
                   Parser.$fShowLispVal1) -}
de11748afe47b1fa0ce3970be4bc42ed
  $fShowLispVal_$cshowsPrec ::
    GHC.Types.Int -> Parser.LispVal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Parser.LispVal) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Parser.$w$cshowsPrec ww1 w1 }) -}
8c2cc42a72cbd0aba56d75e291feb6d4
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok)
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
bf1fe43e1d440f1bbbb939d58bbf1571
  $s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream ::
    GHC.Base.Monad Data.Functor.Identity.Identity
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                (\ @ tok -> Data.Functor.Identity.$fMonadIdentity) -}
cad52781f1efd6132c6f84e0e8b329de
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ 'GHC.Types.PtrRepLifted
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
41be713ccc49ca448ed5c970821ca061
  $s^1 :: GHC.Types.Float
  {- Strictness: x -}
92fb05b44b0c6e8798233871946af28e
  $s^2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
d7f7238824b61d0fa45b7e2f4238d6ba
  $seven1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
839ba626dd9a280389bba4c21e11e77d
  $tc'Atom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17764705394200377281##
                   14880358881525991772##
                   Parser.$trModule
                   Parser.$tc'Atom1) -}
fd3dbe19d52c0b1991c94f7ee7698096
  $tc'Atom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Atom"#) -}
3a31a136459c27e02e7deaaeeea0d682
  $tc'Bool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16059871593081921463##
                   1089948002432716338##
                   Parser.$trModule
                   Parser.$tc'Bool1) -}
0d85f45e267f7faeb565273355922c27
  $tc'Bool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Bool"#) -}
0b4aa831347124faad4bf48b28239439
  $tc'Char :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15093862480963246371##
                   6863559834184418142##
                   Parser.$trModule
                   Parser.$tc'Char1) -}
9b9e2d024a7ddc9bd77416559fb847b1
  $tc'Char1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Char"#) -}
d19e98c167b2f95f1f3e711bdb700dc0
  $tc'DottedList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3049516017186298808##
                   7278932705235974130##
                   Parser.$trModule
                   Parser.$tc'DottedList1) -}
657714cabcc2133bee6fce7b379314e8
  $tc'DottedList1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'DottedList"#) -}
21777b7cf6a83392b651bfb1efccceff
  $tc'Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14778148021087329429##
                   12623259396467195865##
                   Parser.$trModule
                   Parser.$tc'Float1) -}
6a07e9e604db1576346ab1928c29e4f6
  $tc'Float1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Float"#) -}
2c4c5d477ed4daed50a3ffe2bf02b234
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13663917418278033492##
                   11248822602705687520##
                   Parser.$trModule
                   Parser.$tc'List1) -}
e0637e2b3ada1a5ee9cff38bfb5930fe
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'List"#) -}
6eeb9ea947f03c8dc0b711ac281176d6
  $tc'Number :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2548685438135925590##
                   6687916389953982728##
                   Parser.$trModule
                   Parser.$tc'Number1) -}
36764d7978d64658d5a3f90650c8ecdf
  $tc'Number1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Number"#) -}
fac2ddfceca6059c33aeb5b6f35eb553
  $tc'String :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6538529133224245779##
                   13395840100106745023##
                   Parser.$trModule
                   Parser.$tc'String1) -}
ba2198c6449368652e1b90147cb18288
  $tc'String1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'String"#) -}
64b1356a4993fcfb0ee7bd0c3f644f8d
  $tc'Vector :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17235109681224463108##
                   9831193171378098352##
                   Parser.$trModule
                   Parser.$tc'Vector1) -}
7d96f54af08dff4d4eede72d2f64f48d
  $tc'Vector1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Vector"#) -}
5aaa4521880065748b3bccba8e6ffc5b
  $tcLispVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6746637087256505123##
                   7363480136441129173##
                   Parser.$trModule
                   Parser.$tcLispVal1) -}
e2c841716a50e68dad0a6a6c4e0af68d
  $tcLispVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "LispVal"#) -}
92a625a452d001d161b0dc61940bf2b0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule2
                   Parser.$trModule1) -}
85c2253a3e7fa7a6fcc4b3de32a2e80b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Parser"#) -}
a9d69ee3f8327d82180cf84b3a9b95eb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "scheme-interpreter-0.1.0.0-JFS5auRCRjm1JEogNedKop"#) -}
de11748afe47b1fa0ce3970be4bc42ed
  $w$cshowsPrec :: GHC.Prim.Int# -> Parser.LispVal -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
ea1adfe0f40f54d4ce27ac5702eeb299
  $w$s^ ::
    GHC.Types.Float -> GHC.Integer.Type.Integer -> GHC.Prim.Float#
  {- Arity: 2, Strictness: <L,U(U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Types.Float)
                   (w1 :: GHC.Integer.Type.Integer) ->
                 case GHC.Integer.Type.ltInteger#
                        w1
                        Parser.$s^2 of wild { DEFAULT ->
                 case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild of wild1 {
                   GHC.Types.False
                   -> case GHC.Integer.Type.eqInteger#
                             w1
                             Parser.$s^2 of wild2 { DEFAULT ->
                      case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                        GHC.Types.False
                        -> case w of ww { GHC.Types.F# ww1 -> Parser.$wf ww1 w1 }
                        GHC.Types.True -> 1.0# } }
                   GHC.Types.True
                   -> case Parser.$s^1 ret_ty GHC.Prim.Float# of {} } }) -}
20662e83fe6c383364dfeea0f3ff40e9
  $wf ::
    GHC.Prim.Float# -> GHC.Integer.Type.Integer -> GHC.Prim.Float#
  {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
9ab0aaa3f476c708f0724628d04496f9
  type LispParser = Text.Parsec.String.Parser Parser.LispVal
de11748afe47b1fa0ce3970be4bc42ed
  data LispVal
    = Atom GHC.Base.String
    | Char GHC.Types.Char
    | List [Parser.LispVal]
    | DottedList [Parser.LispVal] Parser.LispVal
    | Number GHC.Integer.Type.Integer
    | Float GHC.Types.Float
    | String GHC.Base.String
    | Bool GHC.Types.Bool
    | Vector (Data.Vector.Vector Parser.LispVal)
3418737436a4782ad6772d988d08fdc2
  parseExpr :: Parser.LispParser
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Parser.parseExpr1
                  `cast`
                (Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <GHC.Base.String>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <Parser.LispVal>_R)) -}
5b185e166af4a2980eba6604dda0b561
  parseExpr1 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (Parser.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Parser.LispVal
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
instance GHC.Classes.Eq [Parser.LispVal] = Parser.$fEqLispVal
instance GHC.Show.Show [Parser.LispVal] = Parser.$fShowLispVal
"SPEC/Parser $fStream[]mtok @ Identity _" [ALWAYS] forall @ tok
                                                          ($dMonad :: GHC.Base.Monad
                                                                        Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  $dMonad
  = Parser.$s$fStream[]mtok @ tok
"SPEC/Parser $fStream[]mtok_$cp1Stream @ Identity _" [ALWAYS] forall @ tok
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cp1Stream @ Data.Functor.Identity.Identity
                                             @ tok
                                             $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cp1Stream @ tok
"SPEC/Parser $fStream[]mtok_$cuncons @ Identity _" [ALWAYS] forall @ tok
                                                                   ($dMonad :: GHC.Base.Monad
                                                                                 Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

